	/*
 * Asteroid.c
 *
 *  Created on: 18 apr. 2018
 *      Author: fr0177ma-s
 */
#include "Asteroid.h"
#include "vga.h"
#include "math.h"

void SpawnAsteroid(struct Asteroid *a, unsigned char Size)
{
	struct Asteroid tempo = *a;

	if(Size == TINY){

	}else if(Size == SMALL){
		tempo.size = &AsteroidSmall;
		tempo.speed = 10;
	}else if(Size == MEDIUM){
		tempo.size = &AsteroidMedium;
		tempo.speed = 6;
	}else if(Size == LARGE){
		tempo.size = &AsteroidLarge;
		tempo.speed = 4;
	}else{
		tempo.size = &AsteroidXLarge;
		tempo.speed = 2;
	}

	tempo.moveX = tempo.speed * cos(tempo.moveAngle);
	tempo.moveY = tempo.speed * sin(tempo.moveAngle);

	drawCircle(tempo.x, tempo.y, tempo.size, COLOR_WHITE);
	*a = tempo;
}

void MoveAsteroid(struct Asteroid *a)
{
	struct Asteroid tempo = *a;
	drawCircle(tempo.x, tempo.y, tempo.size, COLOR_BLACK);
	char size = *(tempo.size[0]);

	if((tempo.x - size) < 0 || (tempo.x + size) > 640)
	{
		tempo.moveX = -tempo.moveX;
	}

	if((tempo.y - size) < 0 || (tempo.y + size) > 480)
	{
		tempo.moveY = -tempo.moveY;
	}
	tempo.x += tempo.moveX;
	tempo.y += tempo.moveY;

	drawCircle(tempo.x, tempo.y, tempo.size, COLOR_WHITE);
	*a = tempo;
}

void MoveAsteroidWithoutBounce(struct Asteroid *a)
{
	struct Asteroid tempo = *a;
	drawCircle(tempo.x, tempo.y, tempo.size, COLOR_BLACK);
	char size = *(tempo.size[0]);
	tempo.x += tempo.moveX;
	tempo.y += tempo.moveY;

	drawCircle(tempo.x, tempo.y, tempo.size, COLOR_WHITE);
	*a = tempo;
}

char collisionDetection (struct Asteroid *a,int x, int y, int length, int angle)
{
//	struct Asteroid tempo = *a;
//	int distanceX = (x - tempo.x);
//	int distanceY = (y - tempo.y);
//	int radius = *(tempo.size[0]) + 15;
//	if(distanceX < radius || distanceY < radius){
//		//triangeln == cirkeln
//		int distance = distanceX*distanceX + distanceY*distanceY;
//		// *a.size[0] = radius of the circle, 15 length of player
//		if(distance < (radius*radius)){
//			drawSquare(0,0,100,100, COLOR_RED);
//		}
//	}

	struct Asteroid tempo = *a;
	if(x - tempo.x < 150 && y - tempo.y < 150){
		double rad = pi/180 * angle;

		int x0 = (int)(x + length * cos(rad + pi/2));
		int y0 = (int)(y + length * sin(rad + pi/2));

		int x1 = (int)(x + length * cos(rad + 5*pi/4));
		int y1 = (int)(y + length * sin(rad + 5*pi/4));

		int x2 = (int)(x + length * cos(rad + 7*pi/4));
		int y2 = (int)(y + length * sin(rad + 7*pi/4));


		// *a.size[0] = radius of the circle
		int radius = (*(tempo.size[0])) * (*(tempo.size[0]));

		int distanceX = (x0 - tempo.x);
		int distanceY = (y0 - tempo.y);
		long distance = distanceX*distanceX + distanceY*distanceY;
		if(distance < radius){
			return TRUE;
		}

		distanceX = (x1 - tempo.x);
		distanceY = (y1 - tempo.y);
		distance = distanceX*distanceX + distanceY*distanceY;
		if(distance < radius){
			return TRUE;
		}

		distanceX = (x2 - tempo.x);
		distanceY = (y2 - tempo.y);
		distance = distanceX*distanceX + distanceY*distanceY;
		if(distance < radius){
			return TRUE;
		}
		return FALSE;
	}
}

void collisionDetectionShot (struct Asteroid *a,int x, int y)
{
	struct Asteroid tempo = *a;
	int radius = (*(tempo.size[0])) * (*(tempo.size[0]));

	if((x - tempo.x) < 115 || y - tempo.y < 115)
	{

		int distanceX = (tempo.x - x);
		int distanceY = (tempo.y - y);
		long distance = distanceX*distanceX + distanceY*distanceY;
		if(distance <= radius){
			//Destroy Asteroid
		}
	}
}


void destroyAsteroid(struct Asteroid *a)
{

}
