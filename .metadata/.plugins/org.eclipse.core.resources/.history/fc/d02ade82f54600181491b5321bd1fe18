	/*
 * Asteroid.c
 *
 *  Created on: 18 apr. 2018
 *      Author: fr0177ma-s
 */
#include "Asteroid.h"
#include "vga.h"
#include "math.h"

void SpawnAsteroid(struct Asteroid *a, unsigned char Size)
{
	struct Asteroid tempo = *a;
	tempo.moveX = tempo.speed * cos(tempo.moveAngle);
	tempo.moveY = tempo.speed * sin(tempo.moveAngle);
//	if(tempo.x - tempo.size < 0)
//	{
//		tempo.x += tempo.size;
//	}
//	if(tempo.x + tempo.size > VGA_WIDTH)
//	{
//		tempo.x -= tempo.size;
//	}
//	if(tempo.y + tempo.size > VGA_HEIGHT)
//	{
//		tempo.y -= tempo.size;
//	}
//	if(tempo.y - tempo.size < 0)
//	{
//		tempo.y += tempo.size;
//	}
	if(Size == TINY){

	}else if(Size == SMALL){
		tempo.size = &AsteroidSmall;
	}else if(Size == MEDIUM){
		tempo.size = &AsteroidMedium;
	}else if(Size == LARGE){
		tempo.size = &AsteroidLarge;
	}else{
		tempo.size = &AsteroidXLarge;
	}
	drawCircle(tempo.x, tempo.y, tempo.size, COLOR_WHITE);
	*a = tempo;
}

void MoveAsteroid(struct Asteroid *a)
{
	struct Asteroid tempo = *a;
	drawCircle(tempo.x, tempo.y, tempo.size, COLOR_BLACK);
	tempo.x += tempo.moveX;
	tempo.y += tempo.moveY;
	drawCircle(tempo.x, tempo.y, tempo.size, COLOR_WHITE);
	*a = tempo;
}

void collisionDetection (struct Asteroid *a,int x, int y, int length, int angle)
{
//	struct Asteroid tempo = *a;
//	int distanceX = (x - tempo.x);
//	int distanceY = (y - tempo.y);
//	int distance = distanceX*distanceX + distanceY*distanceY;
//	// *a.size[0] = radius of the circle, 15 length of player
//	int radius = *(tempo.size[0]) + 15;
//	if(distance < (radius*radius)){
//		drawSquare(0,0,10,10, COLOR_RED);
//	}

	double rad = pi/180 * angle;

	int x0 = (int)(x + length * cos(rad + pi/2));
	int y0 = (int)(y + length * sin(rad + pi/2));

	int x1 = (int)(x + length * cos(rad + 5*pi/4));
	int y1 = (int)(y + length * sin(rad + 5*pi/4));

	int x2 = (int)(x + length * cos(rad + 7*pi/4));
	int y2 = (int)(y + length * sin(rad + 7*pi/4));

	struct Asteroid tempo = *a;
	// *a.size[0] = radius of the circle, 15 length of player
	int radius = (*(tempo.size[0])) * (*(tempo.size[0]));

	int distanceX = (x0 - tempo.x);
	int distanceY = (y0 - tempo.y);
	int distance = distanceX*distanceX + distanceY*distanceY;
	if(distance < radius){
		drawSquare(0,0,10,10, COLOR_RED);
	}

	int distanceX = (x1 - tempo.x);
	int distanceY = (y1 - tempo.y);
	int distance = distanceX*distanceX + distanceY*distanceY;
	if(distance < radius){
		drawSquare(0,0,10,10, COLOR_RED);
	}

	int distanceX = (x2 - tempo.x);
	int distanceY = (y2 - tempo.y);
	int distance = distanceX*distanceX + distanceY*distanceY;
	if(distance < radius){
		drawSquare(0,0,10,10, COLOR_RED);
	}
}

